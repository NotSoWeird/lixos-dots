From 6e7306960bd9279c70fe2aa2056c22f79a9dc4ca Mon Sep 17 00:00:00 2001
From: isabel <isabel@isabelroses.com>
Date: Mon, 2 Dec 2024 22:13:10 +0000
Subject: [PATCH] feat(builtins): abs
---
 lix/libexpr/builtins/abs.md |  5 +++++
 lix/libexpr/meson.build     |  1 +
 lix/libexpr/primops.cc      | 10 ++++++++++
 3 files changed, 16 insertions(+)
 create mode 100644 lix/libexpr/builtins/abs.md

diff --git a/lix/libexpr/builtins/abs.md b/lix/libexpr/builtins/abs.md
new file mode 100644
index 000000000..6c8ab27a2
--- /dev/null
+++ b/lix/libexpr/builtins/abs.md
@@ -0,0 +1,5 @@
+---
+name: abs
+args: [e]
+---
+Return the absolute value of the number *e*.
diff --git a/lix/libexpr/meson.build b/lix/libexpr/meson.build
index dcbc12e7d..628dda384 100644
--- a/lix/libexpr/meson.build
+++ b/lix/libexpr/meson.build
@@ -46,6 +46,7 @@ libexpr_settings_header = custom_target(
 
 builtin_definitions = files(
   'builtins/abort.md',
+  'builtins/abs.md',
   'builtins/add.md',
   'builtins/addDrvOutputDependencies.md',
   'builtins/all.md',
diff --git a/lix/libexpr/primops.cc b/lix/libexpr/primops.cc
index 7b9ea06cc..f65d0946a 100644
--- a/lix/libexpr/primops.cc
+++ b/lix/libexpr/primops.cc
@@ -2443,6 +2443,16 @@ static void prim_bitXor(EvalState & state, const PosIdx pos, Value * * args, Val
     v.mkInt(i1.value ^ i2.value);
 }
 
+static void prim_abs(EvalState & state, const PosIdx pos, Value * * args, Value & v)
+{
+    state.forceValue(*args[0], pos);
+    if (args[0]->type() == nFloat)
+        v.mkFloat(std::abs(state.forceFloat(*args[0], pos, "while evaluating the argument passed to builtins.abs")));
+    else {
+        v.mkInt(std::abs(state.forceInt(*args[0], pos, "while evaluating the argument passed to builtins.abs").value));
+    }
+}
+
 static void prim_lessThan(EvalState & state, const PosIdx pos, Value * * args, Value & v)
 {
     state.forceValue(*args[0], pos);
-- 
2.44.1

